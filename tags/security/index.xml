<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on @me - Nathan Getty Blog</title>
    <link>/tags/security/</link>
    <description>Recent content in security on @me - Nathan Getty Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 18 Feb 2020 21:33:40 +0800</lastBuildDate>
    
	<atom:link href="/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Automated Remediation - Part 2: S3 Buckets</title>
      <link>/2020/02/aws-remedy-2/</link>
      <pubDate>Tue, 18 Feb 2020 21:33:40 +0800</pubDate>
      
      <guid>/2020/02/aws-remedy-2/</guid>
      <description>Prelude Hey! Welcome back! This is the second iteration in our path to secure our AWS environments. Today we’re going to take a look at S3 buckets. You’ve all seen the news, S3 bucket made public, company X has leaked secrets about x,y, or z. Just some examples:
 oh look  oh, another?  wait?!, Theres more!!?!?!   What if we could stop these when they happen! Not after the information gets leaked.</description>
    </item>
    
    <item>
      <title>AWS Automated Remediation - Part 1: Security Groups</title>
      <link>/2020/02/aws-remedy-1/</link>
      <pubDate>Sat, 08 Feb 2020 21:57:40 +0800</pubDate>
      
      <guid>/2020/02/aws-remedy-1/</guid>
      <description>Prelude This is going to be the first in many auto-remediation blog posts! Each one will append more and more to our SAM template. I’m planning on making this a multi-part series where we develop a fully customized system to automatically remediating high risk findings.
It sure is annoying having to revoke open security groups. You have to log into the console, navigate to EC2, find the violation, and remove the open ingress port and CIDR range.</description>
    </item>
    
    <item>
      <title>Cloud Security Commandments</title>
      <link>/2020/01/csc/</link>
      <pubDate>Tue, 28 Jan 2020 21:57:40 +0800</pubDate>
      
      <guid>/2020/01/csc/</guid>
      <description>Preface The following list is my opinion on some of the top cloud controls that should be enabled within your environment. These can be security controls, processes, procedures or systems you create to manage and monitor your resources and users.
The List  Thou shalt use encryption everywhere. If its a checkbox, it gets turned on. Thou shalt not create public facing infrastructure without authorization or approval Thou shalt not blindly grant administration privileges to any principal Thou shalt follow the principle of least privilege when you are deploying policies or permissions Thou shalt not modify firewall rules to allow for all traffic.</description>
    </item>
    
    <item>
      <title>Bandit on the run!</title>
      <link>/2020/01/bandit/</link>
      <pubDate>Sun, 26 Jan 2020 21:57:40 +0800</pubDate>
      
      <guid>/2020/01/bandit/</guid>
      <description>Preface Today I would like to share with you some security tips when using python. We can use static linting to check our code for possible security flaws leveraging bandit. There will be some pretty obvious indicators of bad programming within this document, but only to demonstrate the use cases of the bandit. Not to highlight my inability to program. ☕️
Jumping into it First as always, we will create a virtual environment.</description>
    </item>
    
  </channel>
</rss>