<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2020 11:05:56 -0600</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I Made This Blog</title>
      <link>/posts/how-i-made-this-blog/</link>
      <pubDate>Wed, 29 Jan 2020 11:05:56 -0600</pubDate>
      
      <guid>/posts/how-i-made-this-blog/</guid>
      <description>Whats the deal with blogs and shit? The main reason I wanted this blog is that running a normal website requires hosting a server, keeping it online, updating it and all the other jazz that I dont really care to manage
So how is this blog made?  We use hugo to build the source and write all the articles in markdown format, which makes things so damn easy The source code is stored on github, and we leverage github actions to automatically post new changes to AWS We leverage AWS S3 and a CloudFront Distribution to handle the CDN and certificates  How do you get the automatic deployment working Well github actions are pretty sweet and it allows us to run builds directly from github, which is a great feature.</description>
    </item>
    
    <item>
      <title>Call the police - we got a bandit.</title>
      <link>/posts/bandit/</link>
      <pubDate>Wed, 29 Jan 2020 10:04:03 +0000</pubDate>
      
      <guid>/posts/bandit/</guid>
      <description>The basics Today I would like to share with you some security lessons when using python. How we can use static linting to check our code for possible security flaws leveraging bandit. There will be some pretty obvious indicators of bad programming within this document, but only to demonstrate the power of the bandit. Not to highlight my inability to program. ☕️
First as always, we will create a virtual environment.</description>
    </item>
    
    <item>
      <title>Describe all the things in AWS</title>
      <link>/posts/cross-account-information-gathering/</link>
      <pubDate>Wed, 29 Jan 2020 10:04:03 +0000</pubDate>
      
      <guid>/posts/cross-account-information-gathering/</guid>
      <description>How can query multiple accounts for a lot of informaiton. Well theres a few ways we can do this. Honestly what I beleive is that leveraging a cross account role in each account is one the best ways to hadle this. This allows for us to have the one spot for control and access. If you have a way to deploy this role in an automated way, that would be best.</description>
    </item>
    
  </channel>
</rss>